input {
  # Direct application logs via TCP
  tcp {
    port => 5002
    codec => json_lines
    type => "application-json"
  }
  
  # Application logs via HTTP
  http {
    port => 8081
    type => "application-http"
  }
}

filter {
  # Process application-specific logs
  if [type] == "application-json" or [type] == "application-http" {
    
    # Parse JSON if message is JSON string
    if [message] =~ /^\{.*\}$/ {
      json {
        source => "message"
        target => "app"
      }
    }
    
    # Extract common application fields
    if [app] {
      if [app][level] {
        mutate { add_field => { "level" => "%{[app][level]}" } }
      }
      
      if [app][logger] {
        mutate { add_field => { "logger" => "%{[app][logger]}" } }
      }
      
      if [app][thread] {
        mutate { add_field => { "thread" => "%{[app][thread]}" } }
      }
      
      if [app][message] {
        mutate { replace => { "message" => "%{[app][message]}" } }
      }
    }
    
    # Parse Spring Boot specific patterns
    grok {
      match => { 
        "message" => [
          "%{TIMESTAMP_ISO8601:log_timestamp}\s+%{LOGLEVEL:level}\s+%{NUMBER:pid}\s+---\s+\[%{DATA:thread}\]\s+%{DATA:logger}\s+:\s+%{GREEDYDATA:log_message}",
          "%{LOGLEVEL:level}:\s+%{GREEDYDATA:log_message}"
        ]
      }
      tag_on_failure => ["_grokparsefailure_application"]
    }
    
    # Parse timestamp
    if [log_timestamp] {
      date {
        match => [ "log_timestamp", "yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd'T'HH:mm:ss.SSSZ" ]
      }
    }
    
    # Categorize log levels
    if [level] {
      translate {
        field => "level"
        destination => "log_severity"
        dictionary => {
          "TRACE" => "1"
          "DEBUG" => "2"
          "INFO" => "3"
          "WARN" => "4"
          "ERROR" => "5"
          "FATAL" => "6"
        }
        fallback => "3"
      }
    }
    
    # Add application context
    mutate {
      add_field => { 
        "log_source" => "application"
        "application" => "reminders-app"
      }
    }
    
    # Clean up
    mutate {
      remove_field => [ "app", "headers" ]
    }
  }
}

output {
  # Output to application-specific index
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "application-logs-%{+YYYY.MM.dd}"
    template_name => "application-logs"
    template_pattern => "application-logs-*"
    template => {
      "index_patterns" => ["application-logs-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "message" => { "type" => "text" }
          "log_message" => { "type" => "text" }
          "level" => { "type" => "keyword" }
          "log_severity" => { "type" => "integer" }
          "logger" => { "type" => "keyword" }
          "thread" => { "type" => "keyword" }
          "application" => { "type" => "keyword" }
          "log_source" => { "type" => "keyword" }
        }
      }
    }
  }
}