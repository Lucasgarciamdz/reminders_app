input {
  # Beats input for Filebeat, Metricbeat, etc.
  beats {
    port => 5044
  }
  
  # TCP input for application logs
  tcp {
    port => 5000
    codec => json_lines
    type => "tcp-json"
  }
  
  # UDP input for syslog
  udp {
    port => 5001
    type => "syslog"
  }
  
  # HTTP input for webhooks and API logs
  http {
    port => 8080
    type => "http-webhook"
  }
}

filter {
  # Add timestamp if not present
  if ![timestamp] {
    mutate {
      add_field => { "timestamp" => "%{@timestamp}" }
    }
  }
  
  # Parse JSON logs
  if [type] == "tcp-json" {
    json {
      source => "message"
    }
  }
  
  # Parse syslog format
  if [type] == "syslog" {
    grok {
      match => { 
        "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" 
      }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }
  
  # Add environment and service tags
  mutate {
    add_field => { 
      "environment" => "${ENVIRONMENT:development}"
      "log_source" => "logstash-main"
    }
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "logstash-main-%{+YYYY.MM.dd}"
    template_name => "logstash-main"
    template_pattern => "logstash-main-*"
    template => {
      "index_patterns" => ["logstash-main-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "message" => { "type" => "text" }
          "level" => { "type" => "keyword" }
          "service" => { "type" => "keyword" }
          "environment" => { "type" => "keyword" }
        }
      }
    }
  }
  
  # Debug output to stdout (can be disabled in production)
  stdout { 
    codec => rubydebug 
  }
}